<resources>
    <string name="app_name">RxJava Samsples</string>
    <string name="throttle_first">點擊按鈕打開新 Activity 是一種常見的實現，但由於 Activity 的異步機制，如果用戶不小心連擊了按鈕，有可能導致 App 連續打開同一個 Activity，不僅給用戶帶來使用的不便，還讓用戶覺得『這個軟件做得好傻逼耶』。通過 throttleFirst() 方法加入防抖動延時，可以避免這種情況。試試下面兩個按鈕吧！</string>
    <string name="bt_throttle_first_without">常規實現</string>
    <string name="bt_throttle_first_with">使用 throttleFirst() 去抖動後</string>
    <string name="label_new_activity">我是一個新的 Activity！</string>
    <string name="request_data">請求數據</string>
    <string name="load">加載</string>
    <string name="loading_failed">數據加載失敗</string>
    <string name="title_elementary">基本</string>
    <string name="title_map">轉換(map)</string>
    <string name="title_zip">壓合(zip)</string>
    <string name="page_with_number">第%s頁</string>
    <string name="next_page">下一頁</string>
    <string name="previous_page">上一頁</string>
    <string name="unknow_date">未知日期</string>
    <string name="responsed_data">返回的數據</string>
    <string name="title_token">Token(flatMap)</string>
    <string name="title_token_advanced">Token_高級(retryWhen)</string>
    <string name="invalidate_token">銷毀 token</string>
    <string name="title_cache">緩存(BehaviorSubject)</string>
    <string name="loading_time_and_source">耗時：%1$sms(從%2$s)</string>
    <string name="data_source_memory">內存</string>
    <string name="data_source_disk">磁盤</string>
    <string name="data_source_network">網絡</string>
    <string name="question_mark">\?</string>
    <string name="dialog_elementary">RxJava 和 Retrofit 結合使用最基本的格式：用 subscribeOn() 和 observeOn() 來控制線程，並通過 subscribe() 來觸發網絡請求的開始。代碼大致形式：\n\napi.getData()\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);</string>
    <string name="api_source_zhuangbi">* 本頁 Sample 使用的 API 來自 <b>裝逼大全</b> zhuangbi.info</string>
    <string name="api_source_gank">* 本頁 Sample 使用的 API 來自 <b>乾貨集中營</b> gank.io</string>
    <string name="api_source_zhuangbi_and_gank">* 本頁 Sample 使用的 API 來自 <b>裝逼大全</b> zhuangbi.info 和 <b>乾貨集中營</b> gank.io</string>
    <string name="dialog_map">有些服務端的接口設計，會在返回的數據外層包裹一些額外信息，這些信息對於調試很有用，但本地顯示是用不到的。使用 map() 可以把外層的格式剝掉，只留下本地會用到的核心格式。代碼大致形式：\n\napi.getData()\n&#160;&#160;&#160;&#160;<b>.map(response -> response.data)</b>\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);\n\n(詳見本項目源碼)\n\n當然，map() 也可以用於基於其他各種需求的格式轉換。</string>
    <string name="dialog_zip">有的時候，app 中會需要同時訪問不同接口，然後將結果糅合後轉為統一的格式後輸出（例如將第三方廣告 API 的廣告夾雜進自家平台返回的數據 List 中）。這種並行的異步處理比較麻煩，不過用了 zip() 之後就會簡單得多。代碼大致形式：\n\n<b>Observable.zip(api.getData(),\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;adApi.getAds(), zipFunc())</b>\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);\n\n(詳見本項目源碼)</string>
    <string name="dialog_token">出於安全性、性能等方面的考慮，多數服務器會有一些接口需要傳入 token 才能正確返回結果，而 token 是需要從另一個接口獲取的，這就需要使用兩步連續的請求才能獲取數據（①token -> ②目標數據）。使用 flatMap() 可以用較為清晰的代碼實現這種連續請求，避免 Callback 嵌套的結構。代碼大致形式：\n\napi<b>.getToken()\n&#160;&#160;&#160;&#160;.flatMap(token -> api.getData(token))</b>\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);\n\n(詳見本項目源碼)</string>
    <string name="api_source_rengwuxian">* 由於找不到足夠簡單的用於示例的 token API，本頁 Sample 使用的 API 是<b>我用代碼偽造的</b></string>
    <string name="got_data">獲取到的數據：\nID：%1$d\n用戶名：%2$s</string>
    <string name="got_token_and_data">token:%1$s\n\n獲取到的數據：\nID：%2$d\n用戶名：%3$s</string>
    <string name="dialog_token_advanced">有的 token 並非一次性的，而是可以多次使用，直到它超時或被銷毀（多數 token 都是這樣的）。這樣的 token 處理起來比較麻煩：需要把它保存起來，並且在發現它失效的時候要能夠自動重新獲取新的 token 並繼續訪問之前由於 token 失效而失敗的請求。如果項目中有多處的接口請求都需要這樣的自動修復機制，使用傳統的 Callback 形式需要寫出非常複雜的代碼。而使用 RxJava ，可以用 retryWhen() 來輕鬆地處理這樣的問題。代碼大致形式：\n\napi<b>.getData(token)\n&#160;&#160;&#160;&#160;.retryWhen(observable ->\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;observable.flatMap( ->\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;api.getToken()\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.doOnNext(->updateToken())))</b>\n&#160;&#160;&#160;&#160;.subscribeOn(Schedulers.io())\n&#160;&#160;&#160;&#160;.observeOn(AndroidSchedulers.mainThread())\n&#160;&#160;&#160;&#160;.subscribe(observer);\n\n(詳見本項目源碼)</string>
    <string name="token_expired">token 已失效</string>
    <string name="updated">已更新</string>
    <string name="token_destroyed">token 已銷毀</string>
    <string name="clearMemoryCache">清空內存緩存</string>
    <string name="clearMemoryAndDiskCache">清空內存和磁盤緩存</string>
    <string name="memory_cache_cleared">內存緩存已清空</string>
    <string name="memory_and_disk_cache_cleared">內存緩存和磁盤緩存都已清空</string>
    <string name="dialog_cache">RxJava 中有一個較少被人用到的類叫做 Subject，它是一種*既是 Observable，又是 Observer的東西*，因此可以被用作中間件來做數據傳遞。例如，可以用它的子類 BehaviorSubject 來製作緩存。代碼大致形式：\n\napi.getData()\n&#160;&#160;&#160;&#160;.subscribe(<b>behaviorSubject</b>); // 網絡數據會被緩存\n\n<b>behaviorSubject.subscribe(observer);</b> // 之前的緩存將直接送達 observer\n\n(詳見本項目源碼)</string>

</resources>